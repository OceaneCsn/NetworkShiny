ego_At@result$Description
print(barplot(ego_At, showCategory = 40, font.size = 5))
print(dotplot(ego_At, showCategory = 40, font.size = 5))
print(emapplot(ego_At, layout = "kk"))
res <- subset(ego_At@result, qvalue < 0.01)
res_at <- res
View(res)
enrich_go_at <- intersect(go_at, res_at$ID)
res_at$ID
unique(res_at$ID)
go_at
View(res)
length(go_at)
length(unique(go_at))
length(res$ID)
shiny::runApp('Documents/AppTest/Network_visualisation')
res_at
unique(res_at$ID)
intersect(go_at, unique(res_at$ID))
go_at
res_at$ID
enrich_go_at <- unique(res_at$ID)
res_sl <- occurences[1:180,]
res_at <- unique(res_at$ID)
res_sl <- occurences[1:180,]$GO
occurences[1:180,]$GO
res_sl <- as.vector(occurences[1:180,]$GO)
intersect(res_at, res_sl)
common_go <- intersect(res_at, res_sl)
common_At <- At[res_at %in% common_go ,]
common_Sl <- Sl[res_sl %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
GO_list
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
GO_list
specie = "Arabidopsis"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
At <- OntologyProfile(At$ensembl_gene_id)
specie = "MicroTom"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
Sl <- read.csv(filename, h=T, sep = "\t")
go_sl <- as.vector(na.omit(Sl$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
go_at <- unique(At$go_id)
common_go <- intersect(go_sl, go_at)
print(paste0(length(common_go), "GO terms in common"))
common_At <- At[At$go_id %in% common_go ,]
common_Sl <- Sl[Sl$GO %in% common_go,]
GO_list <- list()
for (GO in common_go){
GO_list[[GO]] <- c(At[grepl(GO, At$go_id),]$ensembl_gene_id, as.vector(Sl[grepl(GO, Sl$GO),]$Solyc))
}
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
ordered_go <- common_go[order(-table(df$GO))]
kable(ranking <- na.omit(At[match(ordered_go, At$go_id),c("go_id", "definition_1006", "name_1006")]))
ranking$Gene_number <- length(GO_list[ranking$go_id])
ggplot(data = df, aes(x = GO, fill = specie)) + geom_histogram(stat = "count") + coord_flip() + scale_fill_brewer(palette="Accent")
GO_list
df <- data.frame(GO = substr(names(unlist(GO_list)), 1, 10), Gene = unlist(GO_list))
df$specie <- ifelse(grepl("AT", df$Gene), "At", "Sl")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(reshape2)
library(PLNmodels)
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
library(visNetwork)
#self written functions for differential expression
source("./DEFunctions.R")
source("./Network_functions.R")
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
load("./normalized.count_At.RData")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
library(GENIE3)
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.25)
data <- toVisNetworkData(net)
View(data)
ont <- OntologyProfile(V(net)$name, plot=F)
runApp('Documents/AppTest/Network_visualisation')
sharedBy3
intersect(TF$AGI,sharedBy3)
View(ont)
ont$ensembl_gene_id
data$nodes$id
match(ont$ensembl_gene_id, data$nodes$id)
match(data$nodes$id, ont$ensembl_gene_id)
ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes
save(data, file = "./DataNetworkGenieCO2Clusters.RData")
runApp('Documents/AppTest/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
shiny::runApp('Documents/ShinyApp/Network_visualisation')
install.packages("shinydashboard")
runApp('Documents/ShinyApp/Network_visualisation')
# GOAt <- read.csv("~/Documents/TAIR10/GeneToGo.txt", sep = '\t', h = F)
# colnames(GOAt) <- c("Gene", "GO")
# go_At = list()
# for (GO in unique(GOAt$GO)){
#   go_At[[GO]] <- unique(as.vector(GOAt[grepl(GO, GOAt$GO),]$Gene))
# }
# save(go_At, file = "go_At.RData")
load("./go_At.RData")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("./")
suppressMessages(library(ggplot2))
suppressMessages(library(gridExtra))
suppressMessages(library(ggpubr))
suppressMessages(library(stringr))
source("DEFunctions.R")
Path_to_genes = "~/Documents/CombinatoireFeNCO2/DEG_CombinatoireCO2_Fe_N/"
comp = c("cnF", "CnF")
# DEG for each organism
specie = "Arabidopsis"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
At <- OntologyProfile(At$ensembl_gene_id, plot=F)
specie = "MicroTom"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
Sl <- read.csv(filename, h=T, sep = "\t")
# GOAt <- read.csv("~/Documents/TAIR10/GeneToGo.txt", sep = '\t', h = F)
# colnames(GOAt) <- c("Gene", "GO")
# go_At = list()
# for (GO in unique(GOAt$GO)){
#   go_At[[GO]] <- unique(as.vector(GOAt[grepl(GO, GOAt$GO),]$Gene))
# }
# save(go_At, file = "go_At.RData")
load("./go_At.RData")
# Annotation MicroTom
go_Sl = list()
GOMicroTom <- read.table("~/Documents/MicroTom/Shared_Genes_Solyc_Sly1.1.csv", sep = '\t', h = T)
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
go_Sl <- as.vector(na.omit(GOMicroTom$GO))
go_Sl <- unique(unlist(str_split(go_Sl, pattern = "\\|" )))
for (GO in go_sl){
go_Sl[[GO]] <- as.vector(GOMicroTom[grepl(GO, Sl$GO),]$Solyc)
}
go_sl <- as.vector(na.omit(GOMicroTom$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
for (GO in go_sl){
go_Sl[[GO]] <- as.vector(GOMicroTom[grepl(GO, Sl$GO),]$Solyc)
}
# Annotation MicroTom
go_Sl = list()
GOMicroTom <- read.table("~/Documents/MicroTom/Shared_Genes_Solyc_Sly1.1.csv", sep = '\t', h = T)
go_sl <- as.vector(na.omit(GOMicroTom$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
for (GO in go_sl){
go_Sl[[GO]] <- as.vector(GOMicroTom[grepl(GO, Sl$GO),]$Solyc)
}
View(go_Sl)
annot_sl <- data.frame(go_Sl)
data.frame(matrix(unlist(go_Sl), nrow=length(go_Sl), byrow=T))
head(annot_sl)
annot_sl <- data.frame(matrix(unlist(go_Sl), nrow=length(go_Sl), byrow=T))
head(annot_sl)
View(annot_sl)
do.call(rbind.data.frame, annot_sl)
unlist(go_Sl)
data.frame(unlist(go_Sl))
annot_sl <- data.frame(G0 = names(go_Sl), GenesId = go_Sl)
names(go_Sl)
go_Sl
data.frame(G0 = names(unlist(go_Sl)), GenesId = unlist(go_Sl))
substr(annot_Sl$GO, 1, 10)
substr(annot_sl$GO, 1, 10)
annot_sl <- data.frame(G0 = names(unlist(go_Sl)), GenesId = unlist(go_Sl))
annot_sl$GO
View(annot_sl)
substr(annot_sl$G0, 1, 10)
annot_sl <- data.frame(GO = names(unlist(go_Sl)), GenesId = unlist(go_Sl))
annot_sl$GO <- substr(annot_sl$GO, 1, 10)
head(annot_sl)
library(clusterProfiler)
enrich_sl <- enricher(Sl$Solyc, TERM2GENE=annot_sl)
head(summary(enrich_sl))
enric_sl
enrich_sl
Sl$Solyc
annot_sl
Sl$Solyc
annot_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.1 )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.5 )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.1, pAdjustMethod = "hochberg" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.1, pAdjustMethod = "hommel" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.1, qvalueCutoff = 0.5, pAdjustMethod = "hommel" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.1, qvalueCutoff = 1, pAdjustMethod = "hommel" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.2, qvalueCutoff = 1, pAdjustMethod = "hommel" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.3, qvalueCutoff = 1, pAdjustMethod = "hommel" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.4, qvalueCutoff = 1, pAdjustMethod = "hommel" )
enrich_sl
annot_at <- data.frame(GO = names(unlist(go_At)), GenesId = unlist(go_At))
annot_at$GO <- substr(annot_at$GO, 1, 10)
View(annot_at)
GOAt <- read.csv("~/Documents/TAIR10/GeneToGo.txt", sep = '\t', h = F)
colnames(GOAt) <- c("Gene", "GO")
enrich_at <- enricher(gene=At$ensembl_gene_id, TERM2GENE=annot_at, universe=GOAt$Gene, pvalueCutoff = 0.4, qvalueCutoff = 1, pAdjustMethod = "hommel")
enrich_at
enrich_at <- enricher(gene=At$ensembl_gene_id, TERM2GENE=annot_at, universe=GOAt$Gene, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "hommel")
enrich_at
summary(enrich_at)
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "hommel" )
enrich_sl
enrich_at <- enricher(gene=At$ensembl_gene_id, TERM2GENE=annot_at, universe=GOAt$Gene, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "hommel")
summary(enrich_at)
enriched_GO_at <- summary(enrich_at)$ID
enriched_GO_at <- data.frame(enrich_at)$ID
comp = c("cnf", "Cnf")
specie = "Arabidopsis"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
At <- OntologyProfile(At$ensembl_gene_id, plot=F)
specie = "MicroTom"
filename <- paste0(Path_to_genes, specie, "/FactorCO2/",translateToOSX(comp), ".txt")
Sl <- read.csv(filename, h=T, sep = "\t")
# Annotation A thaliana
# GOAt <- read.csv("~/Documents/TAIR10/GeneToGo.txt", sep = '\t', h = F)
# colnames(GOAt) <- c("Gene", "GO")
# go_At = list()
# for (GO in unique(GOAt$GO)){
#   go_At[[GO]] <- unique(as.vector(GOAt[grepl(GO, GOAt$GO),]$Gene))
# }
# save(go_At, file = "go_At.RData")
GOAt <- read.csv("~/Documents/TAIR10/GeneToGo.txt", sep = '\t', h = F)
colnames(GOAt) <- c("Gene", "GO")
load("./go_At.RData")
# Annotation MicroTom
go_Sl = list()
GOMicroTom <- read.table("~/Documents/MicroTom/Shared_Genes_Solyc_Sly1.1.csv", sep = '\t', h = T)
go_sl <- as.vector(na.omit(GOMicroTom$GO))
go_sl <- unique(unlist(str_split(go_sl, pattern = "\\|" )))
for (GO in go_sl){
go_Sl[[GO]] <- as.vector(GOMicroTom[grepl(GO, Sl$GO),]$Solyc)
}
# enrichment for MicroTom
annot_sl <- data.frame(GO = names(unlist(go_Sl)), GenesId = unlist(go_Sl))
annot_sl$GO <- substr(annot_sl$GO, 1, 10)
head(annot_sl)
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "hommel" )
enrich_sl
enrich_at <- enricher(gene=At$ensembl_gene_id, TERM2GENE=annot_at, universe=GOAt$Gene, pvalueCutoff = 0.2, qvalueCutoff = 0.2, pAdjustMethod = "hommel")
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.2, qvalueCutoff = 0.2, pAdjustMethod = "hommel" )
enrich_sl
annot_at <- data.frame(GO = names(unlist(go_At)), GenesId = unlist(go_At))
annot_at$GO <- substr(annot_at$GO, 1, 10)
head(annot_at)
enrich_at <- enricher(gene=At$ensembl_gene_id, TERM2GENE=annot_at, universe=GOAt$Gene, pvalueCutoff = 0.2, qvalueCutoff = 0.2, pAdjustMethod = "hommel")
enriched_GO_at <- data.frame(enrich_at)$ID
annot_sl
hist(table(annot_sl$GO))
hist(table(annot_sl$GO), breaks = 30)
hist(table(Sl$GO), breaks = 30)
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.2, qvalueCutoff = 0.2, pAdjustMethod = "none" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.4, qvalueCutoff = 0.2, pAdjustMethod = "none" )
enrich_sl
enrich_sl <- enricher(gene=Sl$Solyc, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.6, qvalueCutoff = 0.2, pAdjustMethod = "none" )
enrich_sl
data(geneList)
require(DOSE)
data(geneList)
geneList
geleList_sl <- Sl$adj.p.value
geneList_sl <- Sl$adj.p.value
names(geneList_sl) <- Sl$Solyc
geneList_sl
gsea_sl <- GSEA(geneList_sl, TERM2GENE=annot_sl)
geneList_sl <- abs(Sl$lfc)
names(geneList_sl) <- Sl$Solyc
gsea_sl <- GSEA(geneList_sl, TERM2GENE=annot_sl)
abs(Sl$lfc)
Sl[order(-Sl$lfc),]
Sl[order(-Sl$lfc),]
Sl[order(-Sl$lfc),]$lfc
Sl <- Sl[order(-Sl$lfc),]
geneList_sl <- abs(Sl$lfc)
names(geneList_sl) <- Sl$Solyc
gsea_sl <- GSEA(geneList_sl, TERM2GENE=annot_sl)
geneList_sl <- abs(Sl$lfc)
names(geneList_sl) <- Sl$Solyc
gsea_sl <- GSEA(geneList_sl, TERM2GENE=annot_sl)
gene=Sl$Solyc
enrich_sl <- enricher(as.vector(gene=Sl$Solyc), TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.6, qvalueCutoff = 0.2, pAdjustMethod = "none" )
enrich_sl <- enricher(gene=as.vector(Sl$Solyc), TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.6, qvalueCutoff = 0.2, pAdjustMethod = "none" )
enrich_sl
enrich_sl <- enricher(gene=as.vector(Sl$Solyc), TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "BH" )
enrich_sl
gene
annot_sl
annot_sl[annot_sl$GenesId %in% as.vector(Sl$Solyc),]
annot_sl[annot_sl$GenesId %in% as.vector(Sl$Solyc),]
annot_sl[annot_sl$GenesId %in% as.vector(Sl$Solyc) & annot_sl$GO == "GO:0005509",]
annot_sl[annot_sl$GenesId %in% as.vector(Sl$Solyc) & annot_sl$GO == "GO:0005509",]$GenesId
as.vector(annot_sl[annot_sl$GenesId %in% as.vector(Sl$Solyc) & annot_sl$GO == "GO:0005509",]$GenesId)
# test pour voir si la même ontologie est detectée
enrich_sl <- enricher(gene=unique_GO, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "BH" )
unique_GO <- as.vector(annot_sl[annot_sl$GenesId %in% as.vector(Sl$Solyc) & annot_sl$GO == "GO:0005509",]$GenesId)
# test pour voir si la même ontologie est detectée
enrich_sl_test <- enricher(gene=unique_GO, TERM2GENE=annot_sl, universe=GOMicroTom$Solyc, pvalueCutoff = 0.05, qvalueCutoff = 0.2, pAdjustMethod = "BH" )
enrich_sl_test
t <- annot_sl[annot_sl$GenesId %in% unique_GO, ]
View(t)
# test pour voir si la même ontologie est detectée
summary(enrich_sl_test)
runApp('Documents/ShinyApp/Network_visualisation')
GOAt
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
Rversion
Rversion()
R.version
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(reshape2)
library(PLNmodels)
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
library(visNetwork)
#self written functions for differential expression
source("./DEFunctions.R")
source("./Network_functions.R")
source("./Visu.R")
specie = "At"
load(paste0("./GenesCO2_",specie,".RData"))
load("./normalized.count_At.RData")
library(GENIE3)
DEG <- read.csv("../DEG_CombinatoireCO2_Fe_N/Arabidopsis/FactorCO2/AmbientCO2_LowNitrateFe-ElevatedCO2_LowNitrateFe.txt", h = T, sep = "\t")
sharedBy3 <- as.vector(DEG$ensembl_gene_id)
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.05)
net <- genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3, thr = 0.05)
mat <- net[[2]]
net <- net[[1]]
data <- toVisNetworkData(net)
ont <- OntologyProfile(V(net)$name, plot=F)
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
netStats(g)
netStats(net)
(degree(data$nodes$id)/max(degree(data$nodes$id))+centrality(data$nodes$id)/max(centrality(data$nodes$id)))*0.5
(degree(net)/max(degree(net))+centrality(net)/max(centrality(net)))*0.5
(degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
importance[match(data$nodes$id, names(importance)),]
importance[match(data$nodes$id, names(importance))]
data$nodes$id
names(importance)
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$ranking <- importance[match(data$nodes$id, names(importance))]
visNetwork(nodes = data$nodes, edges = data$edges, height = "1000px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 0.8, minVelocity=10, maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = c("Ontology"),
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>% visNodes(size = data$nodes$ranking)
visNetwork(nodes = data$nodes, edges = data$edges, height = "1000px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 0.8, minVelocity=10, maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = c("Ontology"),
highlightNearest = TRUE,
nodesIdSelection = TRUE) %>% visNodes(size = data$nodes$ranking*10)
save(data, file = "./DataNetworkGenieCO2LowNitrate.RData")
t <- from_data_frame(data$edges)
plot.igrapg(t)
plot.igraph(t)
from_data_frame(data$edges)
data$edges
igraph::from_data_frame(data$edges)
t <- igraph::from_data_frame(d = data$edges)
t
t <- igraph::graph_from_data_frame(d = data$edges)
plot.igraph(t)
data$nodes
shiny::runApp('Documents/ShinyApp/Network_visualisation')
degree(net)
data$nodes$Centrality <- importance[match(data$nodes$id, names(importance))]
order(-data$nodes$Centrality)
data$nodes$rank <- order(-data$nodes$Centrality)
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
betweenness(net)
match(data$nodes$id, names(betweenness(net)))
betweenness(net)[match(data$nodes$id, names(betweenness(net)))]
data$node$Betweenness
data$node$Betweenness <- betweenness(net)[match(data$nodes$id, names(betweenness(net)))]
data$node$Betweenness
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
order(-data$nodes$Centrality)
order(-data$nodes$Centrality)
runApp('Documents/ShinyApp/Network_visualisation')
data$nodes
data$nodes$Rank <- order(-data$nodes$Centrality)
data$nodes
net <- igraph::graph_from_data_frame(d = data$edges)
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$Betweenness <- betweenness(net)[match(data$nodes$id, names(betweenness(net)))]
data$nodes$Degree <- degree(net)[match(data$nodes$id, names(degree(net)))]
data$nodes$Centrality <- importance[match(data$nodes$id, names(importance))]
data$nodes$Rank <- order(-data$nodes$Centrality)
net <- igraph::graph_from_data_frame(d = data$edges)
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$Betweenness <- betweenness(net)[match(data$nodes$id, names(betweenness(net)))]
data$nodes$Degree <- degree(net)[match(data$nodes$id, names(degree(net)))]
data$nodes$Centrality <- importance[match(data$nodes$id, names(importance))]
data$nodes$Rank <- order(-data$nodes$Centrality)
data$nodes
runApp('Documents/ShinyApp/Network_visualisation')
netStats <- function(g){
degree<- degree(g)
betweenness<- betweenness(g, weights=NA)
Node_nw_st<- data.frame(degree, betweenness)
deg <- ggplot( data = Node_nw_st, aes(x=degree)) +geom_histogram( binwidth=2, fill="#69b3a2", color="#e9ecef", alpha=0.7) +
ggtitle("Degree distribution") +
theme(plot.title = element_text(size=15))
bet <- ggplot( data = Node_nw_st, aes(x=betweenness)) +geom_histogram( fill="#E69F00", color="#e9ecef", alpha=0.7) +
ggtitle("Betweeness distribution") +
theme(plot.title = element_text(size=15))
return(grid.arrange(deg, bet, nrow = 2))
}
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
runApp('Documents/ShinyApp/Network_visualisation')
shiny::runApp()
