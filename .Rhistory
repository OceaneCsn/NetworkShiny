suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./Imports/ToolFunctions.R")
source("./Imports/VisuFunctions.R")
#PATH_TO_DEG <- "~/Documents/CombinatoireFeNCO2/DEG_CombinatoireCO2_Fe_N/Arabidopsis/"
PATH_TO_DEG <- "D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/Arabidopsis"
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl_gene_id)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
geneList(c("cNF", "CNF"))
geneList(c("cnF", "CnF"))
geneList(c("cNf", "CNf"))
geneList(c("cnf", "Cnf"))
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[c("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
View(DEGs)
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
View(DEGs)
save(DEGs, file = "./Data/DEGsFilterLists.RData")
geneList <- function(comp, filter=F){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
save(DEGs, file = "./Data/DEGsLists.RData")
genes <- unlist(DEGs)
genes <- unique(unlist(DEGs))
load("./Data/normalized.count_At.RData")
cluster <- clustering(genes, normalized.count, nb_clusters = 5:20)
round(normalized.count, 0)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 5:20)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 14:15)
heatmap(normalized.count[sample(genes, size = 700),])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
genes <- unique(unlist(DEGs))
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
cluster <- clustering(genes, round(normalized.count[,!grepl("cNF_1", colnames(normalized.count))], 0), nb_clusters = 8:14)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 8:14)
idsList <- cluster[[1]]
idsList
list <- names(idsList)
names(list) <- as.vector(idsList)
list
list(list)
as.list(list)
idsList
load("./Data/AGIToEntrez.RDAta")
View(AGIToEntrez)
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(names(idsList))){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id)
}
list <- names(idsList)
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 15, font.size = 10))
return(resCk)
}
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 25, font.size = 10))
return(resCk)
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
entrez
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
as.character(AGIToEntrez$entrezgene_id)
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[as.character(k)]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
DEGs[[FactorCO2]]
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"),paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
DEGs[[FactorCO2]]
FactorCO2
#heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
DEGs$FactorCO2
DEGs[FactorCO2]
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron", h=T)
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.table("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library(readr)
library("readr")
install.packages("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
View(a)
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
install.packages("HTSCluster")
HTSClusterUsersGuide()
library(HTSCluster)
HTSClusterUsersGuide()
install.packages("coronavirus")
library(coronavirus)
data(coronavirus)
force(coronavirus)
tail(coronavirus)
summary(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
remove.packages(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
.libPaths()
devtools::install_github("RamiKrispin/coronavirus")
remove.packages("glue")
remove.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("glue")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("remotes")
devtools::install_github("RamiKrispin/coronavirus")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("Rcpp")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("digest")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages(processx)
install.packages("processx")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
library(utils)
library(httr)
#download the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv(tf)
View(data)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g
read.csv(g)
g$content
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"))
install.packages("RNentropy")
setwd("D:/These/CombinatoireRNASeqFeNCO2")
load("normalized.count_At.RData")
library(HTSFilter)
library(RNentropy)
filter <- HTSFilter(data, group, s.min=1, s.max=200, s.len=100)
group <- sapply(colnames(data), getLabel, with.rep = F)
groups <- str_split_fixed(colnmaes(normalized.count, "_", 2))[,1]
library(stringr)
groups <- str_split_fixed(colnmaes(normalized.count, "_", 2))[,1]
groups <- str_split_fixed(colnmaes(normalized.count), "_", 2)[,1]
groups <- str_split_fixed(colnames(normalized.count), "_", 2)[,1]
filter <- HTSFilter(normalized.count, groups, s.min=1, s.max=200, s.len=100)
data <- filter$filteredData
head(data)
dim(normalized.count)
dim(data)
rows = colnames(data)
cols = groups
cols = unique(groups)
matrix(cols, rows)
data.frame(row.names = rows)
design <- data.frame(row.names = rows)
cols[1]
col <- cols[1]
grep(col, rows)
grepl(col, rows)
design <- data.frame(row.names = rows)
for(col in cols){
design$col <- grepl(col, rows)
}
design
design <- data.frame(row.names = rows)
for(col in cols){
design[,col] <- grepl(col, rows)
}
design
as.numeric(design)
as.numeric(as.matrix(design))
data.frame(as.numeric(as.matrix(design)))
colss <- sapply(design, is.logical)
design[,colss] <- lapply(design[,colss], as.numeric)
head(design)
library(corrplot)
corrplot(design)
heatmap(design)
heatmap(as.matrix(design))
rn <- RN_calc(data, design = design)
rn <- RN_calc(x = data, design = design)
data
head(data)
data.frame(data)
data <- data.frame(data)
head(data)
data <- data.frame(data)
rn <- RN_calc(x = data, design = design)
rn <- RN_calc(X = data, design = design)
as.matrix(design)
rn <- RN_calc(X = data, design = as.matrix(design))
rn$res
res <- rn$res
View(res)
rn$gpv
-log(0.01, base = 10)
-log(0.01, base = 2)
-log(0.01, base = e)
-log(0.01, base = 'e')
-log(0.01, base = 10)
hist(rn$gpv)
rnp$gpv < 2
rn$gpv < 2
sum(rn$gpv < 2)
sum(rn$gpv < -log(0.05))
sum(rn$gpv < .log(0.01))
sum(rn$gpv < -log(0.05))
sum(rn$gpv < -log(0.01))
sum(rn$gpv < -log(0.01, base=10))
sum(rn$gpv < -log(0.05, base=10))
sum(rn$gpv > -log(0.01, base=10))
sum(rn$gpv > -log(0.05, base=10))
sum(rn$gpv > -log(0.001, base=10))
sum(rn$gpv > -log(0.05, base=10))
sum(rn$gpv > -log(0.00001, base=10))
sum(rn$gpv > -log(0.0000000000000001, base=10))
sum(rn$gpv > -log(0.0000000000000000000000000000001, base=10))
sum(rn$gpv > -log(0.000000000000000000000000000000000000000000000000001, base=10))
sum(rn$gpv > -log(0.01, base=10))
sum(rn$gpv > -log(0.05, base=10))
rn$lpv
simi <- RN_pmi(rn)
simi
simi$npmi
corrplot(simi$npmi)
lpv = rn$lpv
View(lpv)
hist(rn$lpv)
-log(0.01, base=10)
ifelse(lpv > -log(0.01, base = 10))
ifelse(lpv > -log(0.01, base = 10), 1, 0)
boolLpvifelse(lpv > -log(0.01, base = 10), T, F)
boolLpv <- ifelse(lpv > -log(0.01, base = 10), T, F)
View(boolLpv)
lpvGrouped <- data.frame
lpvGrouped <- data.frame()
boolLpv <- ifelse(lpv > -log(0.01, base = 10), 1, 0)
group = groups[1]
# local pvalues
lpv = rn$lpv
lpvGrouped <- data.frame()
boolLpv <- ifelse(lpv > -log(0.01, base = 10), 1, 0)
for(group in groups){
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpv$group <- colProds(boolLpv)
}
library(matrixStats)
for(group in groups){
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpv$group <- colProds(boolLpv)
}
# local pvalues
lpv = rn$lpv
lpvGrouped <- data.frame()
boolLpv <- ifelse(lpv > -log(0.01, base = 10), 1, 0)
for(group in groups){
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpvGrouped$group <- colProds(boolLpv)
}
# local pvalues
lpv = rn$lpv
lpvGrouped <- data.frame()
lpvGrouped <- data.frame(nrow = dim(lpv)[1])
boolLpv <- ifelse(lpv > -log(0.01, base = 10), 1, 0)
for(group in groups){
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpvGrouped$group <- colProds(boolLpv)
}
colProds(boolLpv)
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
View(rn)
View(samples)
colProds(samples)
rowProds(samples)
# local pvalues
lpv = rn$lpv
lpvGrouped <- data.frame(nrow = dim(lpv)[1])
boolLpv <- ifelse(lpv > -log(0.01, base = 10), 1, 0)
for(group in groups){
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpvGrouped$group <- rowProds(samples)
}
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpvGrouped$group <- rowProds(samples)
lpvGrouped[,group] <- rowProds(samples)
lpvGrouped[,group]
lpvGrouped <- data.frame(nrow = dim(lpv)[1], ncol = length(groups))
colnames(plvGrouped) <- groups
colnames(lpvGrouped) <- groups
lpvGrouped <- data.frame(nrow = dim(lpv)[1], ncol = length(groups))
groups
length(groups)
lpvGrouped <- data.frame(nrow = dim(lpv)[1], ncol = length(groups))
View(lpvGrouped)
lpvGrouped <- data.frame(nrows = dim(lpv)[1], ncols = length(groups))
lpvGrouped <- data.frame(row.names = lpvrownames(plv), col.names = unique(groups))
lpvGrouped <- data.frame(row.names = rownames(plv), col.names = unique(groups))
lpvGrouped <- data.frame(row.names = rownames(lpv), col.names = unique(groups))
rownames(lpv)
data.frame(row.names = rownames(lpv), col.names = unique(groups))
lpvGrouped <- data.frame(row.names = rownames(lpv))
colnames(lpvGrouped) <- unique(groups)
lpvGrouped <- data.frame(row.names = rownames(lpv))
boolLpv <- ifelse(lpv > -log(0.01, base = 10), 1, 0)
for(group in groups){
samples <- boolLpv[,grepl(group, colnames(boolLpv))]
lpvGrouped[,group] <- rowProds(samples)
}
lpvGrouped
DEgenes <- lpvGrouped[rowSums(lpvGrouped)> 0,]
# Plus coherent qu'avec les gpv, on trouve ici 12918 genes DE dans au moins l'une des conditions
heatmap(as.matrix(normalized.count[DEgenes,]))
# Plus coherent qu'avec les gpv, on trouve ici 12918 genes DE dans au moins l'une des conditions
heatmap(as.matrix(normalized.count[rownames(DEgenes),]))
heatmap(as.matrix(DEgenes))
DEgenes
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("D:/These/CombinatoireRNASeqFeNCO2")
load("normalized.count_At.RData"
library(HTSFilter)
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
setwd("D:/These/CombinatoireRNASeqFeNCO2")
load("normalized.count_At.RData")
library(HTSFilter)
library(RNentropy)
library(stringr)
library(corrplot)
library(matrixStats)
groups <- str_split_fixed(colnames(normalized.count), "_", 2)[,1]
# remove lower expressed genes
filter <- HTSFilter(normalized.count, groups, s.min=1, s.max=200, s.len=100)
data <- filter$filteredData
head(data)
dim(normalized.count)
dim(data)
########## design matrix
rows = colnames(data)
cols = unique(groups)
design <- data.frame(row.names = rows)
col <- cols[1]
for(col in cols){
design[,col] <- grepl(col, rows)
}
colss <- sapply(design, is.logical)
design[,colss] <- lapply(design[,colss], as.numeric)
head(design)
heatmap(as.matrix(design))
data <- data.frame(data)
head(data)
### RNENtropy
rn <- RN_calc(X = data, design = as.matrix(design))
res <- rn$res
rn$gpv
hist(rn$gpv)
sum(rn$gpv > -log(0.01, base=10))
sum(rn$gpv > -log(0.05, base=10))
# local pvalues
lpv = rn$lpv
head(lpv)
lpvGrouped <- data.frame(row.names = rownames(lpv))
colnames(lpvGrouped) <- unique(groups)
shiny::runApp('D:/These/NetworkShiny')
