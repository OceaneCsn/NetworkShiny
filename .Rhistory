plnData <- prepare_data(counts = counts, covariates = covariates)
groups <- str_split_fixed(colnames(data), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
DEGenes <- sharedBy3
# preparation des donnÃ©es
counts <- round(t(data[DEGenes,]), 0)
plnData <- prepare_data(counts = counts, covariates = covariates)
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:5
)
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:5
); PCA_models
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:8
); PCA_models
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:9
); PCA_models
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:3
); PCA_models
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:4
); PCA_models
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:4
); PCA_models;PCA_models$criteria %>% knitr::kable()
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:4
); PCA_models;plot(PCA_models)
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:20
); PCA_models;plot(PCA_models)
PCA_models <- PLNPCA(
Abundance ~ 1 + nitrate + fer + co2 + offset(log(Offset)),
data  = plnData,
ranks = 1:10
); PCA_models;plot(PCA_models)
myPCA_ICL <- getBestModel(PCA_models, "ICL")
View(plnData)
clusteredGenes[as.vector(rownames(data))]
as.vector(rownames(data))
```{r cluster}
load(paste0("./GenesCO2_",specie,".RData"))
load("./normalized.count_At.RData")
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
#quantification file
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
clusteredGenes <- clustering(sharedBy3, data)
clusteredGenes
rownames(data)
as.vector(rownames(data))
clusteredGenes[as.vector(rownames(data))]
clusteredGenes[rownames(data)]
clusteredGenes
clusteredGenes
plot(myPCA_ICL, ind_cols = clusteredGenes[rownames(data[DEGenes,])])
gridExtra::grid.arrange(
plot(myPCA_ICL, map = "individual", plot = FALSE),
plot(myPCA_ICL, map = "variable", plot = FALSE),
ncol = 2
)
gridExtra::grid.arrange(
plot(myPCA_ICL, ind_cols=groups, map = "individual", plot = FALSE),
plot(myPCA_ICL, map = "variable", plot = FALSE),
ncol = 2
)
gridExtra::grid.arrange(
plot(myPCA_ICL, ind_cols=groups, map = "individual", plot = FALSE),
plot(myPCA_ICL, var_cols = "black", map = "variable", plot = FALSE),
ncol = 2
)
plot(myPCA_ICL, ind_cols =groups)
sigma(myPCA_ICL) %>% corrplot(is.corr = FALSE)
library(corrplot)
sigma(myPCA_ICL) %>% corrplot(is.corr = FALSE)
plot(myPCA_ICL, ind_cols =groups)
gridExtra::grid.arrange(
plot(myPCA_ICL, ind_cols=groups, map = "individual", plot = FALSE),
plot(myPCA_ICL, var_cols = clusteredGenes[rownames(data[DEGenes,])], map = "variable", plot = FALSE),
ncol = 2
)
gridExtra::grid.arrange(
plot(myPCA_ICL, ind_cols=groups, map = "individual", plot = FALSE),
plot(myPCA_ICL, var_cols = factor(clusteredGenes[rownames(data[DEGenes,])]), map = "variable", plot = FALSE),
ncol = 2
)
plot(myPCA_ICL, ind_cols =groups, var_cols = factor(clusteredGenes[rownames(data[DEGenes,])]))
groups <- str_split_fixed(colnames(data), "_", 2)[,1]
co2 <- str_split_fixed(groups, "", 3)[,1]
nitrate <- factor(str_split_fixed(groups, "", 3)[,2])
nitrate <- relevel(nitrate, "N")
fer <- factor(str_split_fixed(groups, "", 3)[,3])
fer = relevel(fer, "F")
covariates <- data.frame(row.names =colnames(data), co2,nitrate, fer)
View(plnData)
shiny::runApp('D:/These/Network_visualisation/SkepticApp')
runApp('D:/SkepticApp')
runApp('D:/SkepticApp')
sigma <- sqrt(n*p*(1-p))
n <- 10
p <- 0.3
sigma <- sqrt(n*p*(1-p))
mu <- n*p
x_inf <- round(mu-3*sigma, 0)
x_max <- round(mu+3*sigma, 0)
sigma <- sqrt(n*p*(1-p))
mu <- n*p
x_inf <- max(0,round(mu-3*sigma, 0))
x_max <- round(mu+3*sigma, 0)
X  <- x_inf:x_max
df <- data.frame(x = X, y = dbinom(x, n, p))
df <- data.frame(x = X, y = dbinom(X, n, p))
ggplot(data = df, aes(x = x, y = y)) + geom_bar(stat = "identity", col = "darkgreen", alpha = 0.4)
ggplot(data = df, aes(x = x, y = y)) + geom_bar(stat = "identity", col = "darkblue", alpha = 0.4)
ggplot(data = df, aes(x = x, y = y)) + geom_bar(stat = "identity", fill = "darkblue", alpha = 0.4)
runApp('D:/SkepticApp')
runApp('D:/SkepticApp')
runApp('D:/SkepticApp')
library(shinythemes)
runApp('D:/SkepticApp')
runApp('D:/SkepticApp')
runApp('D:/SkepticApp')
runApp('D:/SkepticApp')
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
#self written functions for differential expression
setwd("./")
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
suppressMessages(library(reshape2, warn.conflicts = F, quietly = T))
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmData$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
View(glmData)
glmData <- melt(round(normalized.count[DEgenes,], 0))
glmData <- glmData[sample(rownames(glmData)),]
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
# On verifie que toutes les conditions soient bien représentées après le nouvel échantillonnage
summary(glmData$Condition)
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer")]
head(glmData)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
glmData <- glmData[sample(rownames(glmData), size=1000, replace = F),]
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmDataTest$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
glmData <- glmData[sample(rownames(glmData), size=100, replace = F),]
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmDataTest$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
View(glmData)
glmData <- glmData[sample(rownames(glmData)),]
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
install.packages("lme4")
require(lme4)
View(glmData)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer)
(1 | gene), data = glmData, family = possion(link="log"), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
mixGlm
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer)
(1 | gene), data = glmData, family = poisson(link="log"), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer)
(1 | gene), data = glmData, family = poisson(link="log"), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
print(mixGlm)
print(mixGlm, corr = F)
library(lmerTest)
install.packages("lmerTest")
(lmerTest)
install.packages("lmerTest")
library(lmerTest)
lmm <- lmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
lmer(mixGlm)
lmer(mixGlm, data = glmData)
print(mixGlm, corr = F)
lmm <- lmerTest::lmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
#glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
shiny::runApp('D:/dontbeadick')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
data$nodes
load("./DataNetworkGenieCO2LowNitrate.RData")
setwd("D:/These/NetworkShiny")
load("./DataNetworkGenieCO2LowNitrate.RData")
load("./normalized.count_At.RData")
data$nodes
head(data$nodes)
data$nodes$group
data$nodes$group <- ifelse(data$nodes$group == 1, "Transcription Factor", "Target Gene")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
heatmapPerso(normalized.count)
heatmapPerso <- function(normalized.count, genes=NA, conds="all", specie="At", geneNames=NA){
if(is.null(genes)){genes <- sample(rownames(normalized.count), size = 6)}
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(length(geneNames) > 1) {
print("coucou")
exp.heatmap = exp.heatmap + scale_y_discrete(labels=geneNames)
}
print(exp.heatmap)
}
heatmapPerso(normalized.count)
runApp()
shiny::runApp()
heatmapPerso(normalized.count)
sample(rownames(normalized.count), size = 6)
load("./DataNetworkGenieCO2LowNitrate.RData")
load("./normalized.count_At.RData")
sample(rownames(normalized.count), size = 6)
genes <- sample(rownames(normalized.count), size = 6)
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(length(geneNames) > 1) {
print("coucou")
exp.heatmap = exp.heatmap + scale_y_discrete(labels=geneNames)
}
print(exp.heatmap)
conds="all", specie="At", geneNames=NA
conds="all"
specie="At"
geneNames=NA
if(specie == "At") load("normalized.count_At.RData")
if(specie == "Sl") load("normalized.count_Sl.RData")
if (length(conds) ==1){
conds = colnames(normalized.count)
}else{conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))}
df <- data.frame(t(normalized.count[genes,conds]))
df$condition <- str_split_fixed(rownames(df), "_", 2)[,1]
df$exactCondition <- rownames(df)
data <- gather(data = df,key = gene,value = expression, -condition, -exactCondition)
exp.heatmap <- ggplot(data = data, mapping = aes(x = exactCondition, y = gene,
fill = log(expression+0.1))) +
geom_tile() + xlab(label = "Condition") +
facet_grid(~ condition, switch = "x", scales = "free_x", space = "free_x") + labs(fill = "Normalized expression") +
theme(axis.title.y = element_blank(),
axis.text.x = element_blank()) + scale_fill_distiller(palette = "YlGnBu")
if(length(geneNames) > 1) {
print("coucou")
exp.heatmap = exp.heatmap + scale_y_discrete(labels=geneNames)
}
print(exp.heatmap)
sample(rownames(normalized.count), size = 6)
runApp()
runApp()
runApp()
runApp()
View(normalized.count)
runApp()
runApp()
runApp()
runApp()
