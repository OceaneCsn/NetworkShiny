glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts+1), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
mixGlm <- glmer(Counts ~  as.factor(Co2) + as.factor(nitrate) + as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
# sans interactions
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
genes <- names(cluster[[1]][cluster[[1]]==8])
DEgenes <- genes
profiles <- normalized.count/rowSums(normalized.count)
heatmap(as.matrix(profiles[genes,]))
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts+1), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
# sans interactions
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
DEgenes <- genes
profiles <- normalized.count/rowSums(normalized.count)
heatmap(as.matrix(profiles[genes,]))
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
# on enleve les preplicats de genes
#glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts+1), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
# sans interactions
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
DEgenes <- genes
profiles <- normalized.count/rowSums(normalized.count)
heatmap(as.matrix(profiles[genes,]))
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
# on enleve les preplicats de genes
#glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts+1), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
# sans interactions
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + gene, family = poisson(link="log"), data = glmData)
summary(glm)
DEgenes <- genes
genes <- names(cluster[[1]][cluster[[1]]==5])
load("D:/These/ClusteringAnalysis/Clusterings/AmbientCO2_LowNitrateFe-ElevatedCO2_LowNitrateFe.RData")
genes <- names(cluster[[1]][cluster[[1]]==5])
DEgenes <- genes
profiles <- normalized.count/rowSums(normalized.count)
heatmap(as.matrix(profiles[genes,]))
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts+1), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + gene, family = poisson(link="log"), data = glmData)
summary(glm)
glmDataTest <- data.frame(glmData)
glmDataTest$fer
sample(glmDataTest$fer, replace = F)
glmDataTest$fer <- sample(glmDataTest$fer, replace = F)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmDataTest, family = poisson(link="log"))
summary(mixGlm)
kable(head(glmData), size=20)
kable(head(glmData), n=20)
kable(head(glmData, n=20), n=20)
model.matrix(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer), data = glmData)
44*3*8
pbinom(3280, size=10000, p=1/3)
pbinom(3334, size=10000, p=1/3)
pbinom(3332, size=10000, p=1/3)
pbinom(2000, size=10000, p=1/3)
pbinom(3333, size=10000, p=1/3)
pbinom(10, size=10000, p=1/100)
pbinom(10, size=10000, p=1/1000)
dbinom(10, size=10000, p=1/1000)
dbinom()
dbinom(0.5)
dbinom(5, size = 10, 0.5)
qbinom(5, size = 10, 0.5)
qbinom(5, size = 10, p=0.5)
pbinom(q = 5, size=10, p=0.5)
pbinom(q = 5, size=10, p=0.5)
pbinom(q = 5, size=10, p=0.5)
pbinom(q = 4, size=10, p=0.5)
pbinom(q = 6, size=10, p=0.5)
pbinom(q = 7, size=10, p=0.5)
dbinom(q = 7, size=10, p=0.5)
kable(head(model.matrix(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer), data = glmData), n=20))
kable(head(model.matrix( as.factor(Co2) * as.factor(nitrate) * as.factor(fer), data = glmData), n=20))
Counts ~
kable(head(model.matrix( ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer), data = glmData), n=20))
Counts
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
library(stringr)
library(GENIE3)
library(igraph)
library(visNetwork)
library(bc3net)
setwd("D:/These/NetworkInference")
load("./Data/DEGsListsFiltered.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("./Data/normalized.count_At.RData")
load("Data/OntologyAllGenes.RData")
source("Funtions/Network_functions.R")
genes <- DEGs[["cnF CnF"]]
rownames(ontologies) <- ontologies$ensembl_gene_id
removeNitrateStarv = F; removeIronStarv = F
if (removeIronStarv) normalized.count <- normalized.count[,grepl("F", colnames(normalized.count))]
if (removeNitrateStarv) normalized.count <- normalized.count[,grepl("N", colnames(normalized.count))]
setwd("D:/These/NetworkInference")
load("./Data/DEGsListsFiltered.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("./Data/normalized.count_At.RData")
load("Data/OntologyAllGenes.RData")
source("Funtions/Network_functions.R")
genes <- DEGs[["cNF cnF"]]
setwd("D:/These/NetworkInference")
load("./Data/DEGsListsFiltered.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("./Data/normalized.count_At.RData")
load("Data/OntologyAllGenes.RData")
genie <- function(normalized.count, regressors, targets, nTrees=1000, nCores=5, top = 0.05, fixedLinkNumber = NA,
returnLinks = F){
print(head(normalized.count))
print(intersect(rownames(normalized.count),regressors))
print(targets)
mat <- GENIE3(normalized.count, regulators = intersect(rownames(normalized.count),regressors), targets = targets, treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
#hist(mat)
links <- getLinkList(mat)
if(returnLinks){return(links)}
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
View(ontologies)
net <- genie(normalized.count, regressors = intersect(genes, TF$AGI), targets = genes, fixedLinkNumber = 600)
plot.igraph(net)
plotStats <- function(net){
ont <- ontologies[match(V(net)$name, ontologies$ensembl_gene_id),]
data <- toVisNetworkData(net)
#attributs des noeuds et des liens
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$ranking <- importance[match(data$nodes$id, names(importance))]
data$edges$value <- data$edges$weight
netStats(net)
#plot
net <- visNetwork(nodes = data$nodes, edges = data$edges)%>%
visEdges(smooth = FALSE, color = '#333366') %>%
#visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5)
print(kable(head(data$nodes[order(-data$nodes$ranking),], n=20)))
return(net)
}
plotStats(net)
plotStats <- function(net){
ont <- ontologies[match(V(net)$name, ontologies$ensembl_gene_id),]
data <- toVisNetworkData(net)
#attributs des noeuds et des liens
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$ranking <- importance[match(data$nodes$id, names(importance))]
data$edges$value <- data$edges$weight
print(netStats(net))
#plot
net <- visNetwork(nodes = data$nodes, edges = data$edges)%>%
visEdges(smooth = FALSE, color = '#333366') %>%
#visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5)
print(kable(head(data$nodes[order(-data$nodes$ranking),], n=20)))
return(net)
}
plotStats(net)
print(netStats(net))
mat <- genie(normalized.count, regressors = intersect(genes, TF$AGI), targets = genes)
genie <- function(normalized.count, regressors, targets, nTrees=1000, nCores=5, top = 0.05, fixedLinkNumber = NA,
returnLinks = F){
print(head(normalized.count))
print(intersect(rownames(normalized.count),regressors))
print(targets)
mat <- GENIE3(normalized.count, regulators = intersect(rownames(normalized.count),regressors), targets = targets, treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
#hist(mat)
links <- getLinkList(mat)
return(mat)
mat <- genie(normalized.count, regressors = intersect(genes, TF$AGI), targets = genes)
getNet <- funtion(mat, fixedLinkNumber=NA, top=0.05)
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
genie <- function(normalized.count, regressors, targets, nTrees=1000, nCores=5, top = 0.05, fixedLinkNumber = NA,
returnLinks = F){
print(head(normalized.count))
print(intersect(rownames(normalized.count),regressors))
print(targets)
mat <- GENIE3(normalized.count, regulators = intersect(rownames(normalized.count),regressors), targets = targets, treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
#hist(mat)
links <- getLinkList(mat)
return(mat)
}
mat <- genie(normalized.count, regressors = intersect(genes, TF$AGI), targets = genes)
getNet <- funtion(mat, fixedLinkNumber=NA, top=0.05){
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
getNet <- funtion(mat, fixedLinkNumber=NA, top=0.05){
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
getNet <- funtion(mat, fixedLinkNumber=NA, top=0.05){
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
getNet <- funtion(mat, fixedLinkNumber=NA, top=0.05){
if(is.na(fixedLinkNumber)) {links <- links[1:round(dim(links)[1]*top,0),]}
else {links <- links[1:fixedLinkNumber,]}
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
getNet <- function(mat, fixedLinkNumber=NA, top=0.05){
if(is.na(fixedLinkNumber)) {links <- links[1:round(dim(links)[1]*top,0),]}
else {links <- links[1:fixedLinkNumber,]}
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
net = getNet(mat, fixedLinkNumber = 2000)
getNet <- function(mat, fixedLinkNumber=NA, top=0.05){
links <- getLinkList(mat)
if(is.na(fixedLinkNumber)) {links <- links[1:round(dim(links)[1]*top,0),]}
else {links <- links[1:fixedLinkNumber,]}
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
net = getNet(mat, fixedLinkNumber = 2000)
plotStats(net)
plotStats <- function(net){
ont <- ontologies[match(V(net)$name, ontologies$ensembl_gene_id),]
data <- toVisNetworkData(net)
#attributs des noeuds et des liens
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$ranking <- importance[match(data$nodes$id, names(importance))]
data$edges$value <- data$edges$weight
print(netStats(net))
#plot
net <- visNetwork(nodes = data$nodes, edges = data$edges)%>%
visEdges(smooth = FALSE, color = '#333366') %>%
#visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5)
print(kable(head(data$nodes[order(-data$nodes$ranking),], n=40)))
return(net)
}
plotStats(net)
removeNitrateStarv = F; removeIronStarv = T; removeCO2Stress=T;
if (removeIronStarv) normalized.count <- normalized.count[,grepl("F", colnames(normalized.count))]
if (removeNitrateStarv) normalized.count <- normalized.count[,grepl("N", colnames(normalized.count))]
if (removeCO2Stress) normalized.count <- normalized.count[,grepl("c", colnames(normalized.count))]
head(normalized.count)
mat <- genie(normalized.count, regressors = intersect(genes, TF$AGI), targets = genes)
net = getNet(mat, fixedLinkNumber = 2000)
plotStats(net)
net = getNet(mat, fixedLinkNumber = 3000)
plotStats(net)
netStats(net)
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
setwd("D:/These/NetworkShiny")
load("./DataNetworkGenieCO2Clusters.RData")
data$nodes
genie <- function(normalized.count, regressors, targets, nTrees=1000, nCores=5, top = 0.05, fixedLinkNumber = NA,
returnLinks = F){
print(head(normalized.count))
print(intersect(rownames(normalized.count),regressors))
print(targets)
mat <- GENIE3(normalized.count, regulators = intersect(rownames(normalized.count),regressors), targets = targets, treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
return(mat)
}
getNet <- function(mat, fixedLinkNumber=NA, top=0.05){
links <- getLinkList(mat)
if(is.na(fixedLinkNumber)) {links <- links[1:round(dim(links)[1]*top,0),]}
else {links <- links[1:fixedLinkNumber,]}
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
networkData <- function(net, ontologies){
ont <- ontologies[match(V(net)$name, ontologies$ensembl_gene_id),]
data <- toVisNetworkData(net)
#attributs des noeuds et des liens
data$nodes$Ontology <- ont[match(data$nodes$id, ont$ensembl_gene_id),]$external_gene_name
data$nodes$description <-ont[match(data$nodes$id, ont$ensembl_gene_id),]$description
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
importance <- (degree(net)/max(degree(net))+betweenness(net)/max(betweenness(net)))*0.5
data$nodes$ranking <- importance[match(data$nodes$id, names(importance))]
data$edges$value <- data$edges$weight
print(kable(head(data$nodes[order(-data$nodes$ranking),], n=40)))
return(data)
}
plotNetwork <- function(data){
visNetwork(nodes = data$nodes, edges = data$edges)%>%
visEdges(smooth = FALSE, color = '#333366') %>%
#visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5)
}
load("./Data/normalized.count_At.RData")
genes <- DEGs[["cNF cnF"]]
rownames(ontologies) <- ontologies$ensembl_gene_id
removeNitrateStarv = F; removeIronStarv = T; removeCO2Stress=F;
if (removeIronStarv) normalized.count <- normalized.count[,grepl("F", colnames(normalized.count))]
if (removeNitrateStarv) normalized.count <- normalized.count[,grepl("N", colnames(normalized.count))]
if (removeCO2Stress) normalized.count <- normalized.count[,grepl("c", colnames(normalized.count))]
head(normalized.count)
mat <- genie(normalized.count, regressors = intersect(genes, TF$AGI), targets = genes)
net = getNet(mat, fixedLinkNumber = 3000)
data <- networkData(net)
data <- networkData(net, ontologies)
plotNetwork <- function(data){
visNetwork(nodes = data$nodes, edges = data$edges)%>%
visEdges(smooth = FALSE, color = '#333366') %>%
#visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5)
}
plotNetwork(data)
data$nodes
save(data, file = "D:/These/NetworkShiny/NetworkData/NitrateDEGenes_CO2-N.RData")
listFiles <- list.files("./NetworkData/", full.names = F)
names(listFiles) = listFiles
files <- lapply(split(listFiles, names(listFiles)), unname)
files
load(paste0("./NetworkData/", files[[1]]))
data$edges
data$nodes
load(paste0("./NetworkData/NitrateDEGenes_CO2-N.RData"]))
load(paste0("./NetworkData/NitrateDEGenes_CO2-N.RData"))
data$nodes
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("./Data/NitrateGenes.RData")
runApp()
runApp()
newNodes <- data$nodes
newNodes <- data$nodes
nScores <- NitrateGenes(data$nodes, nGenes)
newNodes$group <- match(nScores$Gene, newNodes$id)
nScores$Gene
match(nScores$ensembl_gene_id, newNodes$id)
newNodes$id
nScores$ensembl_gene_id
nScores
nScores <- NitrateGenes(data$nodes$id, nGenes)
nScores$ensembl_gene_id
nScores$Gene.id
nScores
match(nScores$Gene, newNodes$id)
nScores[match(nScores$Gene, newNodes$id), "NitrateScore"]
match(newNodes$id, nScores$Gene)
newNodes$color <- nScores[match(newNodes$id, nScores$Gene), "NitrateScore"]
runApp()
runApp()
runApp()
