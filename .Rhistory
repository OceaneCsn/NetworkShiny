path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
save(DEGs, file = "./Data/DEGsLists.RData")
genes <- unlist(DEGs)
genes <- unique(unlist(DEGs))
load("./Data/normalized.count_At.RData")
cluster <- clustering(genes, normalized.count, nb_clusters = 5:20)
round(normalized.count, 0)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 5:20)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 14:15)
heatmap(normalized.count[sample(genes, size = 700),])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
genes <- unique(unlist(DEGs))
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
cluster <- clustering(genes, round(normalized.count[,!grepl("cNF_1", colnames(normalized.count))], 0), nb_clusters = 8:14)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 8:14)
idsList <- cluster[[1]]
idsList
list <- names(idsList)
names(list) <- as.vector(idsList)
list
list(list)
as.list(list)
idsList
load("./Data/AGIToEntrez.RDAta")
View(AGIToEntrez)
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(names(idsList))){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id)
}
list <- names(idsList)
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 15, font.size = 10))
return(resCk)
}
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 25, font.size = 10))
return(resCk)
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
entrez
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
as.character(AGIToEntrez$entrezgene_id)
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[as.character(k)]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
DEGs[[FactorCO2]]
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"),paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
DEGs[[FactorCO2]]
FactorCO2
#heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
DEGs$FactorCO2
DEGs[FactorCO2]
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron", h=T)
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.table("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library(readr)
library("readr")
install.packages("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
View(a)
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
install.packages("HTSCluster")
HTSClusterUsersGuide()
library(HTSCluster)
HTSClusterUsersGuide()
install.packages("coronavirus")
library(coronavirus)
data(coronavirus)
force(coronavirus)
tail(coronavirus)
summary(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
remove.packages(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
.libPaths()
devtools::install_github("RamiKrispin/coronavirus")
remove.packages("glue")
remove.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("glue")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("remotes")
devtools::install_github("RamiKrispin/coronavirus")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("Rcpp")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("digest")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages(processx)
install.packages("processx")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
return(simpOnt)
OntologyEnrich <- function(ids, universe, plot = T, simCutoff = 0.8){
# ids and universe must be entrez gene ids
ego <- enrichGO(gene = ids,
OrgDb = org.At.tair.db,
ont = "BP",
universe = universe,
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
# Elimine les redondances, en fusionnant les GO terms dont la similarite excede le cutoff
simpOnt <- clusterProfiler::simplify(ego, cutoff=simCutoff, by="p.adjust", select_fun=min)
result <- simpOnt@result
print(barplot(simpOnt, showCategory = 40, font.size = 10))
return(emapplot(simpOnt, font.size = 30, layout = "kk"))
return(simpOnt)
}
setwd("D:/These/NetworkInference")
setwd("D:/These/NetworkInference")
plotNetwork <- function(data){
visNetwork(nodes = data$nodes, edges = data$edges)%>%
#visEdges(smooth = FALSE, color = '#333366') %>%
visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5, font=list("size"=36))
}
net <- igraph::graph_from_data_frame(d = data$edges, directed = F)
communities <- cluster_louvain(net)
communities$membership
membership <- membership(communities)
data$nodes$group <- membership[match(data$nodes$id, names(membership))]
plotNetwork(data)
universe <- ontologies$entrezgene_id
OntologyEnrich <- function(ids, universe, plot = T, simCutoff = 0.8){
# ids and universe must be entrez gene ids
ego <- enrichGO(gene = ids,
OrgDb = org.At.tair.db,
ont = "BP",
universe = universe,
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
# Elimine les redondances, en fusionnant les GO terms dont la similarite excede le cutoff
simpOnt <- clusterProfiler::simplify(ego, cutoff=simCutoff, by="p.adjust", select_fun=min)
result <- simpOnt@result
if(plot){
print(barplot(simpOnt, showCategory = 40, font.size = 10))
print(emapplot(simpOnt, layout = "kk"))
}
return(simpOnt)
}
cluster <- membership[1]
ids <- as.character(ontologies[match(data$nodes[data$nodes$group==cluster,]$id, ontologies$ensembl_gene_id),]$entrezgene_id)
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
load("./Data/OntologyAllGenes.RData")
setwd("D:/These/NetworkInference")
plotNetwork <- function(data){
visNetwork(nodes = data$nodes, edges = data$edges)%>%
#visEdges(smooth = FALSE, color = '#333366') %>%
visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5, font=list("size"=36))
}
net <- igraph::graph_from_data_frame(d = data$edges, directed = F)
communities <- cluster_louvain(net)
library(igraph)
communities <- cluster_louvain(net)
communities$membership
membership <- membership(communities)
data$nodes$group <- membership[match(data$nodes$id, names(membership))]
plotNetwork(data)
universe <- ontologies$entrezgene_id
library(igraph)
library("visNetwork")
load("Data")
library(clusterProfiler)
library(org.At.tair.db)
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
load("./Data/OntologyAllGenes.RData")
setwd("D:/These/NetworkInference")
plotNetwork <- function(data){
visNetwork(nodes = data$nodes, edges = data$edges)%>%
#visEdges(smooth = FALSE, color = '#333366') %>%
visEdges(smooth = FALSE, arrows = 'to', color = '#333366') %>%
visPhysics(solver = "forceAtlas2Based", timestep = 0.9, minVelocity=10,
maxVelocity = 10, stabilization = F)%>%
visOptions(selectedBy = "group", highlightNearest = TRUE,nodesIdSelection  = TRUE, collapse = TRUE)%>%
visEvents(click = "function(nodes){
Shiny.onInputChange('click', nodes.nodes);
;}") %>%
visGroups(groupname = "Regulator", size = 28,
color = list("background" = "#003399", "border"="#FFFFCC"), shape = "square") %>%
visGroups(groupname = "Target Gene", color = "#77EEAA") %>%
visNodes(borderWidth=0.5, font=list("size"=36))
}
OntologyEnrich <- function(ids, universe, plot = T, simCutoff = 0.8){
# ids and universe must be entrez gene ids
ego <- enrichGO(gene = ids,
OrgDb = org.At.tair.db,
ont = "BP",
universe = universe,
pAdjustMethod = "BH",
pvalueCutoff  = 0.01,
qvalueCutoff  = 0.05,
readable = TRUE)
# Elimine les redondances, en fusionnant les GO terms dont la similarite excede le cutoff
simpOnt <- clusterProfiler::simplify(ego, cutoff=simCutoff, by="p.adjust", select_fun=min)
result <- simpOnt@result
if(plot){
print(barplot(simpOnt, showCategory = 40, font.size = 10))
print(emapplot(simpOnt, layout = "kk"))
}
return(simpOnt)
}
cluster <- membership[1]
ids <- as.character(ontologies[match(data$nodes[data$nodes$group==cluster,]$id, ontologies$ensembl_gene_id),]$entrezgene_id)
OntologyEnrich(ids, universe)
cluster <- membership[1]
ids <- as.character(ontologies[match(data$nodes[data$nodes$group==cluster,]$id, ontologies$ensembl_gene_id),]$entrezgene_id)
data$nodes
match(data$nodes[data$nodes$group==cluster,]$id, ontologies$ensembl_gene_id)
ontologies
match(data$nodes[data$nodes$group==cluster,]$id, ontologies$ensembl_gene_id)
ontologies$ensembl_gene_id
data$nodes[data$nodes$group==cluster,]$id
data$nodes$group
data$nodes$group <- membership[match(data$nodes$id, names(membership))]
plotNetwork(data)
universe <- ontologies$entrezgene_id
ids <- as.character(ontologies[match(data$nodes[data$nodes$group==cluster,]$id, ontologies$ensembl_gene_id),]$entrezgene_id)
simOnt <- OntologyEnrich(ids, universe)
simOnt <- OntologyEnrich(ids, as.character(universe))
simpOnt@result
simOnt@result
library(ggplot2)
ggplot(data= simOnt, aes(x=Description, y=GeneRatio, color=p.ajust)) + geom_bar()
ggplot(data= simOnt, aes(x=Description, y=GeneRatio, color=p.adjust)) + geom_bar()
ggplot(data= simOnt, aes(x=Description, y=GeneRatio, color=p.adjust)) + geom_bar(stat = "identity")
ggplot(data= simOnt, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")
ggplot(data= simOnt, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip()
simOnt
simOnt@result
simOnt@result@Description
ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab("")
ggplot(data= simOnt@result, aes(x=Description, y=as.numeric(GeneRatio), fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab("")
ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab("")
simOnt@result
simOnt@result <- simOnt@result[order(-simOnt@result@p.adjust),]
simOnt@result@p.adjust
simOnt@result <- simOnt@result[order(-simOnt@result$p.adjust),]
ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab("")
simOnt@result <- simOnt@result[order(-simOnt@result$p.adjust),]
ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab("")
library(plotly)
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab(""))
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylabel(""))
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + y_label(""))
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + y_lab(""))
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ylab(""))
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() + ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab(""))
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(strip.text.x = element_text(size = 26), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 28, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title=element_text(size=17)) +)
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(strip.text.x = element_text(size = 26), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 28, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title=element_text(size=17)) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(strip.text.x = element_text(size = 26), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 18, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title=element_text(size=17)) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(strip.text.x = element_text(size = 26), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 18, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_text(size=0)) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_text(size=0)) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=22, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(plot.title = element_text(size=15, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=20),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size = 26, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(plot.title = element_text(size=15, face="bold"),
legend.title = element_text(size = 20, face="bold"), legend.text = element_text(size=15),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size = 16, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") +
theme(plot.title = element_text(size=15, face="bold"),
legend.title = element_text(size = 20, face="bold"), legend.text = element_text(size=15),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size = 10, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") + xlab("Gene Ratio")+
theme(plot.title = element_text(size=15, face="bold"),
legend.title = element_text(size = 20, face="bold"), legend.text = element_text(size=15),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size =0, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") + xlab("Gene Ratio")+
theme(plot.title = element_text(size=15, face="bold"),
legend.title = element_text(size = 20, face="bold"), legend.text = element_text(size=15),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size =5, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
ggplotly(ggplot(data= simOnt@result, aes(x=Description, y=GeneRatio, fill=p.adjust)) + geom_bar(stat = "identity")+ coord_flip() +
ggtitle(paste("Enriched Ontologies for module", cluster)) + ylab("") + xlab("Gene Ratio")+
theme(plot.title = element_text(size=15, face="bold"),
legend.title = element_text(size = 20, face="bold"), legend.text = element_text(size=15),
axis.text.y = element_text(size = 15, angle = 20), axis.text.x = element_text(size =8, angle = 0, hjust = 0, colour = "grey50"),
axis.title.y=element_blank()) )
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
setwd("D:/These/NetworkShiny")
runApp()
runApp()
runApp()
simOnt@result$GeneRatio
str_split_fixed(simOnt@result$GeneRatio, "/", 2)
values <- str_split_fixed(simOnt@result$GeneRatio, "/", 2)
as.numeric(values[,1])/ as.numeric(values[,2])
runApp()
runApp()
#print(barplot(simpOnt, showCategory = 40, font.size = 10))
#print(emapplot(simpOnt, font.size = 30, layout = "kk"))
return(simpOnt)
runApp()
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(reshape2, warn.conflicts = F, quietly = T))
suppressMessages(library(lme4, warn.conflicts = F, quietly = T))
setwd("D:/These/CO2NutritionAnalysis/")
load("./Data/normalized.count_At.RData")
load("./Data/filteredData.RData")
source("D:/These/ClusteringAnalysis/Functions/ClusterAnalysis.R")
source("D:/These/NetworkShiny/Visu.R")
source("D:/These/CO2NutritionAnalysis/Imports/ToolFunctions.R")
load("D:/These/ClusteringAnalysis/Clusterings/AmbientCO2_LowNitrateFe-ElevatedCO2_LowNitrateFe.RData")
plotProfile(cluster, boxplot = T, expression="profiles")
plotProfile(cluster, boxplot = T, expression="counts")
genes <- names(cluster[[1]][cluster[[1]]==5])
DEgenes <- genes
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
kable(head(glmData, n=20))
kable(head(model.matrix(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer), data = glmData), n=20))
kable(head(glmData, n=20))
head(glm)
head(glmData)
head(glmData)
dim(glmData)
save(glmData, file = "D:/These/PoissonGlmData_44genesCluster.RData")
load(file = "D:/These/PoissonGlmData_44genesCluster.RData")
DEgenes <- genes
# profiles <- normalized.count/rowSums(normalized.count)
# heatmap(as.matrix(profiles[genes,]))
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
# si on enleve les replicats de genes
#glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
kable(head(glmData, n=20))
head(glmData)
kable(head(model.matrix(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer), data = glmData), n=20))
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts+1), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
# sans interactions
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
